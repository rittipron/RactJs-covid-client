{"ast":null,"code":"function getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n;\n\nfunction generateData(iterations = 100, defaultValues = [], namePrefix = {}, maxJump = 100) {\n  const arr = [];\n\n  for (let i = 0; i <= iterations; i++) {\n    const values = defaultValues.map((v, idx) => {\n      if (i === 0 && typeof v.value === 'number') {\n        return v;\n      }\n\n      return { ...v,\n        value: i === 0 ? this.getRandomNumber(1, 1000) : arr[i - 1].values[idx].value + this.getRandomNumber(0, maxJump)\n      };\n    });\n    arr.push({\n      name: `${namePrefix.prefix || ''} ${(namePrefix.initialValue || 0) + i}`,\n      values\n    });\n  }\n\n  return arr;\n}\n\n;\nexport default {\n  getRandomNumber,\n  generateData\n};","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/helpers.js"],"names":["getRandomNumber","min","max","Math","floor","random","generateData","iterations","defaultValues","namePrefix","maxJump","arr","i","values","map","v","idx","value","push","name","prefix","initialValue"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmC;AAC/B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAAA;;AAED,SAASK,YAAT,CAAsBC,UAAU,GAAG,GAAnC,EAAwCC,aAAa,GAAG,EAAxD,EAA4DC,UAAU,GAAG,EAAzE,EAA6EC,OAAO,GAAG,GAAvF,EAA4F;AAC1F,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,UAArB,EAAiCK,CAAC,EAAlC,EAAsC;AACpC,UAAMC,MAAM,GAAGL,aAAa,CAACM,GAAd,CAAkB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC3C,UAAIJ,CAAC,KAAK,CAAN,IAAW,OAAOG,CAAC,CAACE,KAAT,KAAmB,QAAlC,EAA4C;AAC1C,eAAOF,CAAP;AACD;;AACD,aAAO,EACL,GAAGA,CADE;AAELE,QAAAA,KAAK,EAAEL,CAAC,KAAK,CAAN,GAAU,KAAKZ,eAAL,CAAqB,CAArB,EAAwB,IAAxB,CAAV,GAA0CW,GAAG,CAACC,CAAC,GAAG,CAAL,CAAH,CAAWC,MAAX,CAAkBG,GAAlB,EAAuBC,KAAvB,GAA+B,KAAKjB,eAAL,CAAqB,CAArB,EAAwBU,OAAxB;AAF3E,OAAP;AAID,KARc,CAAf;AASAC,IAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAG,GAAEV,UAAU,CAACW,MAAX,IAAqB,EAAG,IAAG,CAACX,UAAU,CAACY,YAAX,IAA2B,CAA5B,IAAiCT,CAAE,EADhE;AAEPC,MAAAA;AAFO,KAAT;AAID;;AACD,SAAOF,GAAP;AACD;;AAAA;AAED,eAAe;AACbX,EAAAA,eADa;AAEbM,EAAAA;AAFa,CAAf","sourcesContent":["function getRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  function generateData(iterations = 100, defaultValues = [], namePrefix = {}, maxJump = 100) {\n    const arr = [];\n    for (let i = 0; i <= iterations; i++) {\n      const values = defaultValues.map((v, idx) => {\n        if (i === 0 && typeof v.value === 'number') {\n          return v;\n        }\n        return {\n          ...v,\n          value: i === 0 ? this.getRandomNumber(1, 1000) : arr[i - 1].values[idx].value + this.getRandomNumber(0, maxJump)\n        }\n      });\n      arr.push({\n        name: `${namePrefix.prefix || ''} ${(namePrefix.initialValue || 0) + i}`,\n        values\n      });\n    }\n    return arr;\n  };\n  \n  export default {\n    getRandomNumber,\n    generateData\n  }"]},"metadata":{},"sourceType":"module"}