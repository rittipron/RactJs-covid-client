{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nfunction DynamicBarChart(props) {\n  var _useState = useState([]),\n      _useState2 = slicedToArray(_useState, 2),\n      dataQueue = _useState2[0],\n      setDataQueue = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = slicedToArray(_useState3, 2),\n      activeItemIdx = _useState4[0],\n      setActiveItemIdx = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = slicedToArray(_useState5, 2),\n      highestValue = _useState6[0],\n      setHighestValue = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = slicedToArray(_useState7, 2),\n      currentValues = _useState8[0],\n      setCurrentValues = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = slicedToArray(_useState9, 2),\n      firstRun = _useState10[0],\n      setFirstRun = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = slicedToArray(_useState11, 2),\n      afterClick = _useState12[0],\n      setAfterClick = _useState12[1];\n\n  var iterationTimeoutHolder = null;\n\n  function start() {\n    if (activeItemIdx > 1) {\n      return;\n    }\n\n    if (props.onRunStart) {\n      props.onRunStart();\n    }\n\n    nextStep(true);\n  }\n\n  function setNextValues() {\n    if (!dataQueue[activeItemIdx]) {\n      iterationTimeoutHolder = null;\n\n      if (props.onRunEnd) {\n        props.onRunEnd();\n      }\n\n      return;\n    }\n\n    var roundData = dataQueue[activeItemIdx].values;\n    var nextValues = {};\n    var highestValue = 0;\n    roundData.map(function (c) {\n      nextValues[c.id] = _extends({}, c, {\n        color: c.color || (currentValues[c.id] || {}).color || getRandomColor()\n      });\n\n      if (Math.abs(c.value) > highestValue) {\n        highestValue = Math.abs(c.value);\n      }\n\n      return c;\n    });\n    setCurrentValues(nextValues);\n    setHighestValue(highestValue);\n    setActiveItemIdx(activeItemIdx + 1);\n  }\n\n  function nextStep() {\n    var firstRun = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    setFirstRun(firstRun);\n    setNextValues();\n  }\n\n  useEffect(function () {\n    setDataQueue(props.data);\n  }, []);\n  useEffect(function () {\n    if (props.startAutomatically) {\n      start();\n    } else {\n      setNextValues();\n    }\n  }, [dataQueue]);\n  useEffect(function () {\n    if (props.startAutomatically || afterClick) {\n      iterationTimeoutHolder = window.setTimeout(nextStep, firstRun ? props.startRunningTimeout : props.iterationTimeout);\n    }\n\n    return function () {\n      if (iterationTimeoutHolder) {\n        window.clearTimeout(iterationTimeoutHolder);\n      }\n    };\n  }, [activeItemIdx, afterClick]);\n  var barHeight = props.barHeight,\n      baseline = props.baseline,\n      iterationTimeout = props.iterationTimeout,\n      chartWrapperStyles = props.chartWrapperStyles,\n      mainWrapperStyles = props.mainWrapperStyles,\n      iterationTitleStyles = props.iterationTitleStyles,\n      labelStyles = props.labelStyles,\n      baselineStyles = props.baselineStyles,\n      showTitle = props.showTitle;\n  var maxValue = highestValue / 0.85;\n  var sortedCurrentValues = Object.keys(currentValues).sort(function (a, b) {\n    return currentValues[b].value - currentValues[a].value;\n  });\n  var hasBaseline = baseline !== null && !isNaN(baseline);\n  var currentItem = dataQueue[activeItemIdx - 1] || {};\n  return React.createElement('div', {\n    className: 'live-chart',\n    style: mainWrapperStyles\n  }, React.createElement(React.Fragment, null, showTitle && React.createElement('h1', {\n    style: iterationTitleStyles\n  }, currentItem.name), React.createElement('section', {\n    className: 'chart',\n    style: chartWrapperStyles\n  }, hasBaseline && React.createElement('div', {\n    className: 'baseline',\n    style: baselineStyles\n  }, React.createElement('span', null, baseline)), React.createElement('div', {\n    className: 'chart-bars ' + (hasBaseline ? 'with-baseline' : ''),\n    style: {\n      height: (barHeight + 20) * Object.keys(currentValues).length\n    }\n  }, sortedCurrentValues.map(function (key, idx) {\n    var currentValueData = currentValues[key];\n    var value = hasBaseline ? (currentValueData.value || baseline) - baseline : currentValueData.value;\n    var width = Math.abs(value / maxValue * 100);\n    var behindbaseline = false;\n\n    if (hasBaseline && currentValueData.value < baseline) {\n      behindbaseline = true;\n    }\n\n    if (hasBaseline) {\n      width = width / 2;\n    }\n\n    var widthStr = void 0;\n\n    if (isNaN(width) || !width) {\n      widthStr = '1px';\n    } else {\n      widthStr = width + '%';\n    }\n\n    return React.createElement('div', {\n      className: 'bar-wrapper ' + (behindbaseline ? 'behind-baseline' : ''),\n      style: {\n        top: (barHeight + 20) * idx,\n        transitionDuration: iterationTimeout / 1000\n      },\n      key: 'bar_' + key\n    }, React.createElement('label', {\n      style: labelStyles\n    }, !currentValueData.label ? key : currentValueData.label), React.createElement('div', {\n      className: 'bar',\n      style: {\n        height: barHeight,\n        width: widthStr,\n        background: typeof currentValueData.color === 'string' ? currentValueData.color : 'linear-gradient(to right, ' + currentValueData.color.join(',') + ')'\n      }\n    }), React.createElement('span', {\n      className: 'value',\n      style: {\n        color: typeof currentValueData.color === 'string' ? currentValueData.color : currentValueData.color[0]\n      }\n    }, currentValueData.value));\n  })))), props.showStartButton && React.createElement('button', {\n    className: 'start-button',\n    onClick: function onClick() {\n      return setAfterClick(true);\n    },\n    style: props.startButtonStyles\n  }, props.startButtonText));\n}\n\nDynamicBarChart.propTypes = {\n  startAutomatically: PropTypes.bool,\n  showTitle: PropTypes.bool,\n  iterationTimeout: PropTypes.number,\n  data: PropTypes.array,\n  startRunningTimeout: PropTypes.number,\n  barHeight: PropTypes.number,\n  baseline: PropTypes.number,\n  showStartButton: PropTypes.bool,\n  startButtonText: PropTypes.string,\n  mainWrapperStyles: PropTypes.object,\n  chartWrapperStyles: PropTypes.object,\n  baselineStyles: PropTypes.object,\n  iterationTitleStyles: PropTypes.object,\n  labelStyles: PropTypes.object,\n  startButtonStyles: PropTypes.object,\n  onRunStart: PropTypes.func,\n  onRunEnd: PropTypes.func\n};\nDynamicBarChart.defaultProps = {\n  startAutomatically: true,\n  showTitle: true,\n  iterationTimeout: 200,\n  data: [],\n  startRunningTimeout: 0,\n  barHeight: 50,\n  baseline: null,\n  showStartButton: false,\n  startButtonText: 'Start',\n  mainWrapperStyles: {},\n  chartWrapperStyles: {},\n  baselineStyles: {},\n  iterationTitleStyles: {},\n  labelStyles: {},\n  startButtonStyles: {},\n  onRunStart: null,\n  onRunEnd: null\n};\nexport { DynamicBarChart };","map":{"version":3,"sources":["../src/index.js"],"names":["letters","color","i","Math","dataQueue","setDataQueue","useState","activeItemIdx","setActiveItemIdx","highestValue","setHighestValue","currentValues","setCurrentValues","firstRun","setFirstRun","afterClick","setAfterClick","iterationTimeoutHolder","props","roundData","nextValues","c","getRandomColor","window","barHeight","baseline","iterationTimeout","chartWrapperStyles","mainWrapperStyles","iterationTitleStyles","labelStyles","baselineStyles","showTitle","maxValue","sortedCurrentValues","hasBaseline","isNaN","currentItem","name","height","Object","currentValueData","value","width","behindbaseline","widthStr","top","transitionDuration","label","background","startButtonText","DynamicBarChart","PropTypes","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.scss';\n\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)]\n  }\n  return color;\n};\n\nfunction DynamicBarChart(props) {\n  const [dataQueue, setDataQueue] = useState([]);\n  const [activeItemIdx, setActiveItemIdx] = useState(0);\n  const [highestValue, setHighestValue] = useState(0);\n  const [currentValues, setCurrentValues] = useState({});\n  const [firstRun, setFirstRun] = useState(false);\n  const [afterClick, setAfterClick] = useState(false);\n  let iterationTimeoutHolder = null;\n\n  function start() {\n    if (activeItemIdx > 1) {\n      return;\n    }\n    if (props.onRunStart) {\n      props.onRunStart();\n    }\n    nextStep(true);\n  }\n\n  function setNextValues() {\n    if (!dataQueue[activeItemIdx]) {\n      iterationTimeoutHolder = null;\n      if (props.onRunEnd) {\n        props.onRunEnd();\n      }\n      return;\n    }\n\n    const roundData = dataQueue[activeItemIdx].values;\n    const nextValues = {};\n    let highestValue = 0;\n    roundData.map((c) => {\n      nextValues[c.id] = {\n        ...c,\n        color: c.color || (currentValues[c.id] || {}).color || getRandomColor()\n      };\n\n      if (Math.abs(c.value) > highestValue) {\n        highestValue = Math.abs(c.value);\n      }\n\n      return c;\n    });\n\n    setCurrentValues(nextValues);\n    setHighestValue(highestValue);\n    setActiveItemIdx(activeItemIdx + 1);\n  }\n\n  function nextStep(firstRun = false) {\n    setFirstRun(firstRun);\n    setNextValues();\n  }\n\n  useEffect(() => {\n    setDataQueue(props.data);\n  }, []);\n\n  useEffect(() => {\n    if (props.startAutomatically) {\n      start();\n    } else {\n      setNextValues();\n    }\n  }, [dataQueue]);\n\n  useEffect(() => {\n    if (props.startAutomatically || afterClick) {\n      iterationTimeoutHolder = window.setTimeout(nextStep, firstRun ? props.startRunningTimeout : props.iterationTimeout);\n    }\n\n    return () => {\n      if (iterationTimeoutHolder) {\n        window.clearTimeout(iterationTimeoutHolder);\n      }\n    };\n  }, [activeItemIdx, afterClick]);\n\n  const { barHeight, baseline, iterationTimeout, chartWrapperStyles, mainWrapperStyles, iterationTitleStyles, labelStyles, baselineStyles, showTitle } = props;\n  const maxValue = highestValue / 0.85;\n  const sortedCurrentValues = Object.keys(currentValues).sort((a, b) => currentValues[b].value - currentValues[a].value);\n  const hasBaseline = baseline !== null && !isNaN(baseline);\n  const currentItem = dataQueue[activeItemIdx - 1] || {};\n\n  return (\n    <div className=\"live-chart\" style={mainWrapperStyles}>\n      {\n        <React.Fragment>\n          {\n            showTitle &&\n            <h1 style={iterationTitleStyles}>{currentItem.name}</h1>\n          }\n          <section className=\"chart\" style={chartWrapperStyles}>\n            {\n              hasBaseline &&\n              <div className=\"baseline\" style={baselineStyles}><span>{baseline}</span></div>\n            }\n            <div className={`chart-bars ${hasBaseline ? 'with-baseline' : ''}`} style={{ height: (barHeight + 20) * Object.keys(currentValues).length }}>\n              {\n                sortedCurrentValues.map((key, idx) => {\n                  const currentValueData = currentValues[key];\n                  const value = hasBaseline ? (currentValueData.value || baseline) - baseline : currentValueData.value;\n                  let width = Math.abs((value / maxValue * 100));\n                  let behindbaseline = false;\n                  if (hasBaseline && currentValueData.value < baseline) {\n                    behindbaseline = true;\n                  }\n\n                  if (hasBaseline) {\n                    width = width / 2;\n                  }\n\n                  let widthStr;\n                  if (isNaN(width) || !width) {\n                    widthStr = '1px';\n                  } else {\n                    widthStr = `${width}%`;\n                  }\n\n                  return (\n                    <div className={`bar-wrapper ${behindbaseline ? 'behind-baseline' : ''}`} style={{ top: (barHeight + 20) * idx, transitionDuration: iterationTimeout / 1000 }} key={`bar_${key}`}>\n                      <label style={labelStyles}>\n                        {\n                          !currentValueData.label\n                            ? key\n                            : currentValueData.label\n                        }\n                      </label>\n                      <div className=\"bar\" style={{ height: barHeight, width: widthStr, background: typeof currentValueData.color === 'string' ? currentValueData.color : `linear-gradient(to right, ${currentValueData.color.join(',')})` }} />\n                      <span className=\"value\" style={{ color: typeof currentValueData.color === 'string' ? currentValueData.color : currentValueData.color[0] }}>{currentValueData.value}</span>\n                    </div>\n                  );\n                })\n              }\n            </div>\n          </section>\n        </React.Fragment>\n      }\n      {\n        props.showStartButton &&\n        <button className=\"start-button\" onClick={() => setAfterClick(true)} style={props.startButtonStyles}>{props.startButtonText}</button>\n      }\n    </div>\n  );\n};\n\nDynamicBarChart.propTypes = {\n  startAutomatically: PropTypes.bool,\n  showTitle: PropTypes.bool,\n  iterationTimeout: PropTypes.number,\n  data: PropTypes.array,\n  startRunningTimeout: PropTypes.number,\n  barHeight: PropTypes.number,\n  baseline: PropTypes.number,\n  showStartButton: PropTypes.bool,\n  startButtonText: PropTypes.string,\n  mainWrapperStyles: PropTypes.object,\n  chartWrapperStyles: PropTypes.object,\n  baselineStyles: PropTypes.object,\n  iterationTitleStyles: PropTypes.object,\n  labelStyles: PropTypes.object,\n  startButtonStyles: PropTypes.object,\n  onRunStart: PropTypes.func,\n  onRunEnd: PropTypes.func\n};\n\nDynamicBarChart.defaultProps = {\n  startAutomatically: true,\n  showTitle: true,\n  iterationTimeout: 200,\n  data: [],\n  startRunningTimeout: 0,\n  barHeight: 50,\n  baseline: null,\n  showStartButton: false,\n  startButtonText: 'Start',\n  mainWrapperStyles: {},\n  chartWrapperStyles: {},\n  baselineStyles: {},\n  iterationTitleStyles: {},\n  labelStyles: {},\n  startButtonStyles: {},\n  onRunStart: null,\n  onRunEnd: null\n};\n\nexport {\n  DynamicBarChart\n};\n"]},"metadata":{},"sourceType":"module"}