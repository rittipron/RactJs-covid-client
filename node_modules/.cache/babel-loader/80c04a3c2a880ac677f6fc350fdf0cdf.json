{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Project/covid-19/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nfunction App() {\n  _s();\n\n  const [dataCovide, setDataCovide] = useState([]);\n\n  const testconsole = () => {\n    console.log(updateColorC); // dataCovide[1].map((items,i)=>{\n    //   console.log(items.values[0].id);\n    // })\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  const UpdateColorCountry = () => {\n    updateColorC.map(val => {\n      let colors = getRandomColor();\n      axios.put(\"http://localhost:3001/updatecovidworld/c\", {\n        color: colors,\n        country: val.country\n      }).then(() => {}).catch(e => {\n        console.log(e);\n      });\n      console.log(1);\n    });\n  };\n\n  const UpdateColorProvince = () => {\n    updateColorC.map(val => {\n      if (val.province != null) {\n        let colorss = getRandomColor();\n        axios.put(\"http://localhost:3001/updatecovidworld/p\", {\n          color: colorss,\n          province: val.province\n        }).then(() => {}).catch(e => {\n          console.log(e);\n        });\n      } else {\n        console.log(\"Null\");\n      }\n\n      console.log(2);\n    });\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then(response => {\n      // setTestData(response.data);\n      setUpdateColorC(response.data);\n      let res = response.data;\n      let date = \"\";\n      let i = -1;\n      res.map(val => {\n        if (date == val.timeline) {\n          dataCovide[i].values.push({\n            id: val.id_country,\n            label: val.country,\n            value: val.amount,\n            color: val.color\n          });\n          date = val.timeline;\n        } else {\n          dataCovide.push({\n            name: val.timeline,\n            values: [...dataCovide, {\n              id: val.id_country,\n              label: val.country,\n              value: val.amount,\n              color: val.color\n            }]\n          });\n          date = val.timeline;\n          i++;\n        }\n      });\n    }).then(() => {\n      console.log(\"succsen\");\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DynamicBarChart, {\n      data: dataCovide,\n      startAutomatically: false,\n      showStartButton: true,\n      iterationTimeout: 1000,\n      startButtonText: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FXH79uHaaO3LIuhSOe1I6XTYIDQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/App.js"],"names":["useState","useEffect","axios","DynamicBarChart","getRandomColor","letters","color","i","Math","floor","random","App","dataCovide","setDataCovide","testconsole","console","log","updateColorC","UpdateColorCountry","map","val","colors","put","country","then","catch","e","UpdateColorProvince","province","colorss","get","response","setUpdateColorC","data","res","date","timeline","values","push","id","id_country","label","value","amount","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction App() {\n  const [dataCovide, setDataCovide] = useState([]);\n\n  const testconsole = () => {\n    console.log(updateColorC);\n    // dataCovide[1].map((items,i)=>{\n    //   console.log(items.values[0].id);\n    // })\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  const UpdateColorCountry = () => {\n    updateColorC.map((val) => {\n      let colors = getRandomColor();\n      axios\n        .put(\"http://localhost:3001/updatecovidworld/c\", {\n          color: colors,\n          country: val.country,\n        })\n        .then(() => {})\n        .catch((e) => {\n          console.log(e);\n        });\n      console.log(1);\n    });\n  };\n\n  const UpdateColorProvince = () => {\n    updateColorC.map((val) => {\n      if (val.province != null) {\n        let colorss = getRandomColor();\n        axios\n          .put(\"http://localhost:3001/updatecovidworld/p\", {\n            color: colorss,\n            province: val.province,\n          })\n          .then(() => {})\n          .catch((e) => {\n            console.log(e);\n          });\n      } else {\n        console.log(\"Null\");\n      }\n      console.log(2);\n    });\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:3001/covidworld\")\n      .then((response) => {\n        // setTestData(response.data);\n        setUpdateColorC(response.data);\n        let res = response.data;\n        let date = \"\";\n        let i = -1;\n        res.map((val) => {\n          if (date == val.timeline) {\n            dataCovide[i].values.push({\n              id: val.id_country,\n              label: val.country,\n              value: val.amount,\n              color: val.color,\n            });\n            date = val.timeline;\n          } else {\n            dataCovide.push({\n              name: val.timeline,\n              values: [\n                ...dataCovide,\n                {\n                  id: val.id_country,\n                  label: val.country,\n                  value: val.amount,\n                  color: val.color,\n                },\n              ],\n            });\n            date = val.timeline;\n            i++;\n          }\n        });\n      })\n      .then(() => {\n        console.log(\"succsen\");\n      });\n  }, []);\n\n  return (\n    <div>\n      {\n        <DynamicBarChart\n          data={dataCovide}\n          startAutomatically={false}\n          showStartButton={true}\n          iterationTimeout={1000}\n          startButtonText={\"Click Me!\"}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}