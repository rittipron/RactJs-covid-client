{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Project/covid-19/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nfunction App() {\n  _s();\n\n  const [testData, setTestData] = useState([]);\n  const [dataCovide, setDataCovide] = useState([{\n    \"name\": \"Round 1\",\n    \"values\": [{\n      \"id\": 1,\n      \"label\": \"Test 1\",\n      \"value\": 0,\n      \"color\": \"red\"\n    }, {\n      \"id\": 2,\n      \"label\": \"Test 2\",\n      \"value\": 0,\n      \"color\": [\"yellow\", \"green\"]\n    }]\n  }]);\n  const [add, setAdd] = useState([]);\n  const [covid, setCovid] = useState([{\n    \"name\": \"Round 1\",\n    \"values\": [{\n      \"id\": 1,\n      \"label\": \"Test 1\",\n      \"value\": 0,\n      \"color\": \"red\"\n    }, {\n      \"id\": 2,\n      \"label\": \"Test 2\",\n      \"value\": 0,\n      \"color\": [\"yellow\", \"green\"]\n    }]\n  }, {\n    \"name\": \"Round 2\",\n    \"values\": [{\n      \"id\": 1,\n      \"label\": \"Test 1\",\n      \"value\": 10,\n      \"color\": \"red\"\n    }, {\n      \"id\": 2,\n      \"label\": \"Test 2\",\n      \"value\": 5,\n      \"color\": [\"yellow\", \"green\"]\n    }]\n  }, {\n    \"name\": \"Round 3\",\n    \"values\": [{\n      \"id\": 1,\n      \"label\": \"Test 1\",\n      \"value\": 12,\n      \"color\": \"red\"\n    }, {\n      \"id\": 2,\n      \"label\": \"Test 2\",\n      \"value\": 21,\n      \"color\": [\"yellow\", \"green\"]\n    }]\n  }]);\n\n  const testconsole = () => {\n    console.log(dataCovide);\n    dataCovide[1].map((items, i) => {\n      console.log(items.values[0].id);\n    }); // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then(response => {\n      // setTestData(response.data);\n      let date = \"\";\n      response.data.map(val => {\n        let color = getRandomColor();\n\n        if (date == val.timeline) {\n          let number = 1;\n          dataCovide[{\n            number\n          }].map(res => {\n            res.values.push([{\n              id: val.id_country,\n              label: val.country,\n              value: val.amount,\n              color: {\n                color\n              }\n            }]);\n          });\n          number++;\n          date = val.timeline;\n        } else {\n          dataCovide.push([...dataCovide, {\n            name: val.timeline,\n            values: [{\n              id: val.id_country,\n              label: val.country,\n              value: val.amount,\n              color: color\n            }]\n          }]);\n          date = val.timeline;\n        }\n      });\n    }); // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DynamicBarChart, {\n      data: dataCovide,\n      startAutomatically: false,\n      showStartButton: true,\n      iterationTimeout: 1000,\n      startButtonText: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4NChaTopmJz4EHK2a9bfHjtlZVg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/App.js"],"names":["useState","useEffect","axios","DynamicBarChart","getRandomColor","letters","color","i","Math","floor","random","App","testData","setTestData","dataCovide","setDataCovide","add","setAdd","covid","setCovid","testconsole","console","log","map","items","values","id","get","then","response","date","data","val","timeline","number","res","push","id_country","label","country","value","amount","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction App() {\n  const [testData, setTestData] = useState([]);\n  const [dataCovide, setDataCovide] = useState([\n    {\n      \"name\": \"Round 1\",\n      \"values\": [\n        {\n          \"id\": 1,\n          \"label\": \"Test 1\",\n          \"value\": 0,\n          \"color\": \"red\"\n        },\n        {\n          \"id\": 2,\n          \"label\": \"Test 2\",\n          \"value\": 0,\n          \"color\": [\"yellow\", \"green\"]\n        }\n      ]\n    },\n  ]);\n  const [add, setAdd] = useState([]);\n  const [covid, setCovid] = useState([\n    {\n      \"name\": \"Round 1\",\n      \"values\": [\n        {\n          \"id\": 1,\n          \"label\": \"Test 1\",\n          \"value\": 0,\n          \"color\": \"red\"\n        },\n        {\n          \"id\": 2,\n          \"label\": \"Test 2\",\n          \"value\": 0,\n          \"color\": [\"yellow\", \"green\"]\n        }\n      ]\n    },\n    {\n      \"name\": \"Round 2\",\n      \"values\": [\n        {\n          \"id\": 1,\n          \"label\": \"Test 1\",\n          \"value\": 10,\n          \"color\": \"red\"\n        },\n        {\n          \"id\": 2,\n          \"label\": \"Test 2\",\n          \"value\": 5,\n          \"color\": [\"yellow\", \"green\"]\n        }\n      ]\n    },\n    {\n      \"name\": \"Round 3\",\n      \"values\": [\n        {\n          \"id\": 1,\n          \"label\": \"Test 1\",\n          \"value\": 12,\n          \"color\": \"red\"\n        },\n        {\n          \"id\": 2,\n          \"label\": \"Test 2\",\n          \"value\": 21,\n          \"color\": [\"yellow\", \"green\"]\n        }\n      ]\n    }\n  ]);\n\n  const testconsole = () => {\n    console.log(dataCovide)\n    dataCovide[1].map((items,i)=>{\n      console.log(items.values[0].id);\n    })\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then((response) => {\n      // setTestData(response.data);\n      let date = \"\";\n      response.data.map((val)=> {\n      let color = getRandomColor();\n        if (date == val.timeline) {\n          let number = 1;\n          dataCovide[{number}].map((res)=>{\n            res.values.push([{\n                id: val.id_country,\n                label: val.country,\n                value: val.amount,\n                color: {color},\n            }])\n          })\n          number++\n          date = val.timeline;\n        } else {\n          dataCovide.push([...dataCovide,\n            {\n              name: val.timeline,\n              values: [\n                {\n                  id: val.id_country,\n                  label: val.country,\n                  value: val.amount,\n                  color: color,\n                },\n              ],\n            },\n          ]);\n          date = val.timeline;\n        }\n      });\n    });\n    // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n\n  return (\n    <div>\n      <button onClick={testconsole}>Check</button>\n      <button onClick={testconsole}>Check</button>\n      {\n        <DynamicBarChart\n          data={dataCovide}\n          startAutomatically={false}\n          showStartButton={true}\n          iterationTimeout={1000}\n          startButtonText={\"Click Me!\"}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}