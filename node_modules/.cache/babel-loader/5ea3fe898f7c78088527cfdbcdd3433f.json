{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Project/covid-19/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nfunction App() {\n  _s();\n\n  const [testData, setTestData] = useState([]);\n  const [dataCovide, setDataCovide] = useState([]);\n  const [updateColorC, setUpdateColorC] = useState([]);\n  const [updateColorP, setUpdateColorP] = useState([]);\n  const [covid, setCovid] = useState([{\n    name: \"Round 1\",\n    values: [{\n      id: 1,\n      label: \"Test 1\",\n      value: 0,\n      color: \"red\"\n    }, {\n      id: 2,\n      label: \"Test 2\",\n      value: 0,\n      color: [\"yellow\", \"green\"]\n    }]\n  }, {\n    name: \"Round 2\",\n    values: [{\n      id: 1,\n      label: \"Test 1\",\n      value: 10,\n      color: \"red\"\n    }, {\n      id: 2,\n      label: \"Test 2\",\n      value: 5,\n      color: [\"yellow\", \"green\"]\n    }]\n  }, {\n    name: \"Round 3\",\n    values: [{\n      id: 1,\n      label: \"Test 1\",\n      value: 12,\n      color: \"red\"\n    }, {\n      id: 2,\n      label: \"Test 2\",\n      value: 21,\n      color: [\"yellow\", \"green\"]\n    }]\n  }]);\n\n  const testconsole = () => {\n    console.log(updateColorC); // dataCovide[1].map((items,i)=>{\n    //   console.log(items.values[0].id);\n    // })\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  const UpdateColorCountry = () => {\n    updateColorC.map(val => {\n      let colors = getRandomColor();\n      axios.put(\"http://localhost:3001/updatecovidworld/c\", {\n        color: colors,\n        country: val.country\n      }).then(() => {}).catch(e => {\n        console.log(e);\n      });\n      console.log(1);\n    });\n  };\n\n  const UpdateColorProvince = () => {\n    updateColorC.map(val => {\n      if (val.province != null) {\n        let colorss = getRandomColor();\n        axios.put(\"http://localhost:3001/updatecovidworld/p\", {\n          color: colorss,\n          province: val.province\n        }).then(() => {}).catch(e => {\n          console.log(e);\n        });\n      } else {\n        console.log(\"Null\");\n      }\n\n      console.log(2);\n    });\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then(response => {\n      // setTestData(response.data);\n      setUpdateColorC(response.data);\n      let res = response.data;\n      let date = \"\";\n      let i = -1;\n      res.map(val => {\n        let color = getRandomColor();\n\n        if (date == val.timeline) {\n          dataCovide[i].values.push({\n            id: val.id_country,\n            label: val.country,\n            value: val.amount,\n            color: color\n          }); // dataCovide.map((res)=>{\n          //   res.values.push({\n          //       id: val.id_country,\n          //       label: val.country,\n          //       value: val.amount,\n          //       color: color,\n          //   })\n          // })\n\n          date = val.timeline;\n        } else {\n          dataCovide.push({\n            name: val.timeline,\n            values: [...dataCovide, {\n              id: val.id_country,\n              label: val.country,\n              value: val.amount,\n              color: color\n            }]\n          });\n          date = val.timeline;\n          i++;\n        }\n      });\n    }).then(() => {\n      console.log(\"succsen\");\n    }); // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: UpdateColorCountry,\n      children: \"UpdateColorCountry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: UpdateColorProvince,\n      children: \"UpdateColorProvince\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DynamicBarChart, {\n      data: dataCovide,\n      startAutomatically: false,\n      showStartButton: true,\n      iterationTimeout: 1000,\n      startButtonText: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"D+1VMljmc4zmAUsNoFm2tByo5AI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/App.js"],"names":["useState","useEffect","axios","DynamicBarChart","getRandomColor","letters","color","i","Math","floor","random","App","testData","setTestData","dataCovide","setDataCovide","updateColorC","setUpdateColorC","updateColorP","setUpdateColorP","covid","setCovid","name","values","id","label","value","testconsole","console","log","UpdateColorCountry","map","val","colors","put","country","then","catch","e","UpdateColorProvince","province","colorss","get","response","data","res","date","timeline","push","id_country","amount"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction App() {\n  const [testData, setTestData] = useState([]);\n  const [dataCovide, setDataCovide] = useState([]);\n  const [updateColorC, setUpdateColorC] = useState([]);\n  const [updateColorP, setUpdateColorP] = useState([]);\n  const [covid, setCovid] = useState([\n    {\n      name: \"Round 1\",\n      values: [\n        {\n          id: 1,\n          label: \"Test 1\",\n          value: 0,\n          color: \"red\",\n        },\n        {\n          id: 2,\n          label: \"Test 2\",\n          value: 0,\n          color: [\"yellow\", \"green\"],\n        },\n      ],\n    },\n    {\n      name: \"Round 2\",\n      values: [\n        {\n          id: 1,\n          label: \"Test 1\",\n          value: 10,\n          color: \"red\",\n        },\n        {\n          id: 2,\n          label: \"Test 2\",\n          value: 5,\n          color: [\"yellow\", \"green\"],\n        },\n      ],\n    },\n    {\n      name: \"Round 3\",\n      values: [\n        {\n          id: 1,\n          label: \"Test 1\",\n          value: 12,\n          color: \"red\",\n        },\n        {\n          id: 2,\n          label: \"Test 2\",\n          value: 21,\n          color: [\"yellow\", \"green\"],\n        },\n      ],\n    },\n  ]);\n\n  const testconsole = () => {\n    console.log(updateColorC);\n    // dataCovide[1].map((items,i)=>{\n    //   console.log(items.values[0].id);\n    // })\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  const UpdateColorCountry = () => {\n    updateColorC.map((val) => {\n      let colors = getRandomColor();\n      axios\n        .put(\"http://localhost:3001/updatecovidworld/c\", {\n          color: colors,\n          country: val.country,\n        })\n        .then(() => {})\n        .catch((e) => {\n          console.log(e);\n        });\n      console.log(1);\n    });\n  };\n\n  const UpdateColorProvince = () => {\n    updateColorC.map((val) => {\n      if (val.province != null) {\n        let colorss = getRandomColor();\n        axios\n          .put(\"http://localhost:3001/updatecovidworld/p\", {\n            color: colorss,\n            province: val.province,\n          })\n          .then(() => {})\n          .catch((e) => {\n            console.log(e);\n          });\n      } else {\n        console.log(\"Null\");\n      }\n      console.log(2);\n    });\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:3001/covidworld\")\n      .then((response) => {\n        // setTestData(response.data);\n        setUpdateColorC(response.data);\n        let res = response.data;\n        let date = \"\";\n        let i = -1;\n        res.map((val) => {\n          let color = getRandomColor();\n          if (date == val.timeline) {\n            dataCovide[i].values.push({\n              id: val.id_country,\n              label: val.country,\n              value: val.amount,\n              color: color,\n            });\n            // dataCovide.map((res)=>{\n            //   res.values.push({\n            //       id: val.id_country,\n            //       label: val.country,\n            //       value: val.amount,\n            //       color: color,\n            //   })\n            // })\n            date = val.timeline;\n          } else {\n            dataCovide.push({\n              name: val.timeline,\n              values: [\n                ...dataCovide,\n                {\n                  id: val.id_country,\n                  label: val.country,\n                  value: val.amount,\n                  color: color,\n                },\n              ],\n            });\n            date = val.timeline;\n            i++;\n          }\n        });\n      })\n      .then(() => {\n        console.log(\"succsen\");\n      });\n    // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n\n  return (\n    <div>\n      <button onClick={UpdateColorCountry}>UpdateColorCountry</button>\n      <button onClick={UpdateColorProvince}>UpdateColorProvince</button>\n      {\n        <DynamicBarChart\n          data={dataCovide}\n          startAutomatically={false}\n          showStartButton={true}\n          iterationTimeout={1000}\n          startButtonText={\"Click Me!\"}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}