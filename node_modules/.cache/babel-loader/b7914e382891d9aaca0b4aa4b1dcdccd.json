{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Project/covid-19/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nfunction App() {\n  _s();\n\n  const [testData, setTestData] = useState([]);\n  const [dataCovide, setDataCovide] = useState([]);\n  const [updateColorC, setUpdateColorC] = useState([]);\n  const [updateColorP, setUpdateColorP] = useState([]);\n  const [covid, setCovid] = useState([{\n    \"name\": \"Round 1\",\n    \"values\": [{\n      \"id\": 1,\n      \"label\": \"Test 1\",\n      \"value\": 0,\n      \"color\": \"red\"\n    }, {\n      \"id\": 2,\n      \"label\": \"Test 2\",\n      \"value\": 0,\n      \"color\": [\"yellow\", \"green\"]\n    }]\n  }, {\n    \"name\": \"Round 2\",\n    \"values\": [{\n      \"id\": 1,\n      \"label\": \"Test 1\",\n      \"value\": 10,\n      \"color\": \"red\"\n    }, {\n      \"id\": 2,\n      \"label\": \"Test 2\",\n      \"value\": 5,\n      \"color\": [\"yellow\", \"green\"]\n    }]\n  }, {\n    \"name\": \"Round 3\",\n    \"values\": [{\n      \"id\": 1,\n      \"label\": \"Test 1\",\n      \"value\": 12,\n      \"color\": \"red\"\n    }, {\n      \"id\": 2,\n      \"label\": \"Test 2\",\n      \"value\": 21,\n      \"color\": [\"yellow\", \"green\"]\n    }]\n  }]);\n\n  const testconsole = () => {\n    console.log(updateColorC); // dataCovide[1].map((items,i)=>{\n    //   console.log(items.values[0].id);\n    // })\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  const UpdateColorCountry = () => {\n    updateColorC.map(val => {\n      let colors = getRandomColor();\n      axios.put(\"http://localhost:3001/updatecovidworld/c\", {\n        color: colors,\n        country: val.country\n      }).then(() => {}).catch(e => {\n        console.log(e);\n      });\n      console.log(1);\n    });\n  };\n\n  const UpdateColorProvince = () => {\n    updateColorP.map(val => {\n      let colorss = getRandomColor();\n      axios.put(\"http://localhost:3001/updatecovidworld/p\", {\n        color: colorss,\n        province: val.province\n      }).then(() => {}).catch(e => {\n        console.log(e);\n      });\n      console.log(1);\n    });\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then(response => {\n      // setTestData(response.data);\n      setUpdateColorC(response.data);\n      let res = response.data;\n      let date = \"\";\n      let i = -1;\n      res.map(val => {\n        let color = getRandomColor();\n\n        if (date == val.timeline) {\n          dataCovide[i].values.push({\n            id: val.id_country,\n            label: val.country,\n            value: val.amount,\n            color: color\n          }); // dataCovide.map((res)=>{\n          //   res.values.push({\n          //       id: val.id_country,\n          //       label: val.country,\n          //       value: val.amount,\n          //       color: color,\n          //   })\n          // })\n\n          date = val.timeline;\n        } else {\n          dataCovide.push({\n            name: val.timeline,\n            values: [...dataCovide, {\n              id: val.id_country,\n              label: val.country,\n              value: val.amount,\n              color: color\n            }]\n          });\n          date = val.timeline;\n          i++;\n        }\n      });\n    }).then(() => {\n      console.log(\"succsen\");\n    }); // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DynamicBarChart, {\n      data: dataCovide,\n      startAutomatically: false,\n      showStartButton: true,\n      iterationTimeout: 1000,\n      startButtonText: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IdR7wwkTpqjAcR9wNDqsFvFfo0c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/App.js"],"names":["useState","useEffect","axios","DynamicBarChart","getRandomColor","letters","color","i","Math","floor","random","App","testData","setTestData","dataCovide","setDataCovide","updateColorC","setUpdateColorC","updateColorP","setUpdateColorP","covid","setCovid","testconsole","console","log","UpdateColorCountry","map","val","colors","put","country","then","catch","e","UpdateColorProvince","colorss","province","get","response","data","res","date","timeline","values","push","id","id_country","label","value","amount","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction App() {\n  const [testData, setTestData] = useState([]);\n  const [dataCovide, setDataCovide] = useState([]);\n  const [updateColorC, setUpdateColorC] = useState([]);\n  const [updateColorP, setUpdateColorP] = useState([]);\n  const [covid, setCovid] = useState([\n    {\n      \"name\": \"Round 1\",\n      \"values\": [\n        {\n          \"id\": 1,\n          \"label\": \"Test 1\",\n          \"value\": 0,\n          \"color\": \"red\"\n        },\n        {\n          \"id\": 2,\n          \"label\": \"Test 2\",\n          \"value\": 0,\n          \"color\": [\"yellow\", \"green\"]\n        }\n      ]\n    },\n    {\n      \"name\": \"Round 2\",\n      \"values\": [\n        {\n          \"id\": 1,\n          \"label\": \"Test 1\",\n          \"value\": 10,\n          \"color\": \"red\"\n        },\n        {\n          \"id\": 2,\n          \"label\": \"Test 2\",\n          \"value\": 5,\n          \"color\": [\"yellow\", \"green\"]\n        }\n      ]\n    },\n    {\n      \"name\": \"Round 3\",\n      \"values\": [\n        {\n          \"id\": 1,\n          \"label\": \"Test 1\",\n          \"value\": 12,\n          \"color\": \"red\"\n        },\n        {\n          \"id\": 2,\n          \"label\": \"Test 2\",\n          \"value\": 21,\n          \"color\": [\"yellow\", \"green\"]\n        }\n      ]\n    }\n  ]);\n\n  const testconsole = () => {\n    console.log(updateColorC)\n    // dataCovide[1].map((items,i)=>{\n    //   console.log(items.values[0].id);\n    // })\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  const UpdateColorCountry = () =>{\n    updateColorC.map((val)=>{\n      let colors = getRandomColor();\n      axios.put(\"http://localhost:3001/updatecovidworld/c\", {\n          color: colors,\n          country: val.country\n        })\n        .then(() => {}).catch((e)=>{console.log(e)})\n        console.log(1)\n      })\n  }\n\n  const UpdateColorProvince = () =>{\n    updateColorP.map((val)=>{\n      let colorss = getRandomColor();\n      axios.put(\"http://localhost:3001/updatecovidworld/p\", {\n          color: colorss,\n          province: val.province\n        })\n        .then(() => {}).catch((e)=>{console.log(e)})\n        console.log(1)\n      })\n  }\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then((response) => {\n      // setTestData(response.data);\n      setUpdateColorC(response.data)\n      let res = response.data\n      let date = \"\";\n      let i = -1 ; \n      res.map((val)=> {\n      let color = getRandomColor();\n        if (date == val.timeline) {\n          dataCovide[i].values.push({\n                    id: val.id_country,\n                    label: val.country,\n                    value: val.amount,\n                    color: color\n          })\n          // dataCovide.map((res)=>{\n          //   res.values.push({\n          //       id: val.id_country,\n          //       label: val.country,\n          //       value: val.amount,\n          //       color: color,\n          //   })\n          // })\n          date = val.timeline;\n        } else {\n          dataCovide.push({\n              name: val.timeline,\n              values: [...dataCovide,\n                {\n                  id: val.id_country,\n                  label: val.country,\n                  value: val.amount,\n                  color: color,\n                },\n              ],\n            });\n          date = val.timeline;\n          i++\n        }\n      });\n    }).then(()=>{\n      console.log(\"succsen\")\n    });\n    // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n\n  return (\n    <div>\n      <button onClick={testconsole}>Check</button>\n      <button onClick={testconsole}>Check</button>\n      {\n        <DynamicBarChart\n          data={dataCovide}\n          startAutomatically={false}\n          showStartButton={true}\n          iterationTimeout={1000}\n          startButtonText={\"Click Me!\"}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}