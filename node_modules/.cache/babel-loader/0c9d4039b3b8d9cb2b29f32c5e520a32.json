{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Project/covid-19/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [testData, setTestData] = useState([]);\n  const [data, setData] = useState([]);\n  const [add, setAdd] = useState([]);\n  const [covid, setCovid] = useState([{\n    name: \"Round 1\",\n    values: [{\n      id: 1,\n      label: \"Test 1\",\n      value: 0,\n      color: \"red\"\n    }, {\n      id: 2,\n      label: \"Test 2\",\n      value: 0,\n      color: \"yellow\"\n    }, {\n      id: 3,\n      label: \"Test 3\",\n      value: 0,\n      color: \"green\"\n    }]\n  }]);\n\n  const getRandomColor = () => {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  };\n\n  const MapData = () => {\n    // let date = \"\";\n    testData.map(val => {\n      if (date == val.timeline) {\n        data.values.push([{\n          name: val.timeline,\n          values: [{\n            id: 1,\n            label: val.country,\n            value: val.amount,\n            color: \"green\"\n          }]\n        }]);\n        date = val.timeline;\n        console.log(date);\n      } else {\n        data.push([{\n          name: val.timeline,\n          values: [{\n            id: 1,\n            label: val.country,\n            value: val.amount,\n            color: \"green\"\n          }]\n        }]); // date = val.timeline;\n\n        console.log(1);\n      }\n    });\n  };\n\n  const testconsole = () => {\n    console.log(add); // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then(response => {\n      setTestData(response.data);\n    }); // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(DynamicBarChart, {\n      data: data,\n      startAutomatically: false,\n      showStartButton: true,\n      startButtonText: 'Click Me!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rL8G8njs297/12drUJjPXX1S6Ik=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/App.js"],"names":["useState","useEffect","axios","DynamicBarChart","App","testData","setTestData","data","setData","add","setAdd","covid","setCovid","name","values","id","label","value","color","getRandomColor","letters","i","Math","floor","random","MapData","map","val","date","timeline","push","country","amount","console","log","testconsole","get","then","response"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\n\nfunction App() {\n  const [testData, setTestData] = useState([]);\n  const [data, setData] = useState([]);\n  const [add , setAdd] = useState([]);\n  const [covid, setCovid] = useState([\n    {\n      name: \"Round 1\",\n      values: [\n        {\n          id: 1,\n          label: \"Test 1\",\n          value: 0,\n          color: \"red\",\n        },\n        {\n          id: 2,\n          label: \"Test 2\",\n          value: 0,\n          color: \"yellow\",\n        },\n        {\n          id: 3,\n          label: \"Test 3\",\n          value: 0,\n          color: \"green\",\n        },\n      ],\n    }\n  ]);\n\n\n  const getRandomColor = () => {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  const MapData = () =>{\n    // let date = \"\";\n    testData.map((val) => {\n      if (date == val.timeline) {\n        data.values.push([\n          {\n            name: val.timeline,\n            values: [{ \n              id: 1,\n              label: val.country,\n              value: val.amount,\n              color: \"green\",\n            }],\n          },\n        ]);\n        date = val.timeline;\n        console.log(date)\n      } else {\n        data.push([\n          {\n            name: val.timeline,\n            values: [{ \n              id: 1,\n              label: val.country,\n              value: val.amount,\n              color: \"green\",\n            }],\n          },\n        ]);\n        // date = val.timeline;\n        console.log(1)\n      }\n    });\n  }\n\n  const testconsole = () => {\n    console.log(add);\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n\n    // update.map((val)=>{\n    //   axios.put(\"http://localhost:3001/updatecovidworld\", {\n    //       id_country: val.id_country,\n    //       country: val.country\n    //     })\n    //     .then(() => {}).catch((e)=>{console.log(e)})\n    //     console.log(1)\n    //   })\n  };\n\n useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then((response) => {\n      setTestData(response.data);\n    });\n    // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n  }, []);\n\n  return (\n    <div>\n      <button onClick={testconsole}>Check</button><button onClick={testconsole}>Check</button>\n      {<DynamicBarChart \n      data={data} \n      startAutomatically={false}\n      showStartButton={true}\n      startButtonText={'Click Me!'} />}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}