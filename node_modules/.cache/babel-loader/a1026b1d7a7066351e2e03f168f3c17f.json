{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Project/covid-19/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\"; // Don't forget to import the styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [testData, setTestData] = useState([]);\n  const [data, setData] = useState([{\n    name: \"Round 1\",\n    values: [{\n      id: 1,\n      label: \"Test 1\",\n      value: 0,\n      color: \"red\"\n    }, {\n      id: 2,\n      label: \"Test 2\",\n      value: 0,\n      color: \"yellow\"\n    }, {\n      id: 3,\n      label: \"Test 3\",\n      value: 0,\n      color: \"green\"\n    }]\n  }]);\n\n  const testconsole = () => {\n    console.log(testData); // testData.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     country: val.country,\n    //     timeline: \"4/10/21\",\n    //     amount: val.timeline.cases[\"4/10/21\"],\n    //   })\n    //   .then(() => {\n    //     console.log(\"success\")\n    //   }).catch((e)=>{console.log(e)})\n    // })\n  };\n\n  const getRandomColor = () => {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then(response => {\n      setTestData(response.data);\n      let date = \"\";\n      response.data.map((val, key) => {\n        if (date == val.timeline) {\n          data.value.map((value, key) => {\n            setData([...data.values, {\n              id: val.id,\n              label: val.country,\n              value: val.amount,\n              color: {\n                getRandomColor\n              }\n            }]);\n          });\n          date = val.timeline;\n        } else {\n          setData([...data, {\n            name: val.timeline,\n            value: [{\n              id: val.id,\n              label: val.country,\n              value: val.amount,\n              color: {\n                getRandomColor\n              }\n            }]\n          }]);\n          date = val.timeline;\n        }\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DynamicBarChart, {\n      data: data,\n      iterationTimeout: 1000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"DlYFORwQnlDQjIIqyrOEKrHsPH4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/App.js"],"names":["useState","useEffect","axios","DynamicBarChart","App","testData","setTestData","data","setData","name","values","id","label","value","color","testconsole","console","log","getRandomColor","letters","i","Math","floor","random","get","then","response","date","map","val","key","timeline","country","amount"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\"; // Don't forget to import the styles\n\nfunction App() {\n  const [testData, setTestData] = useState([]);\n  const [data, setData] = useState([\n    {\n      name: \"Round 1\",\n      values: [\n        {\n          id: 1,\n          label: \"Test 1\",\n          value: 0,\n          color: \"red\",\n        },\n        {\n          id: 2,\n          label: \"Test 2\",\n          value: 0,\n          color: \"yellow\",\n        },\n        {\n          id: 3,\n          label: \"Test 3\",\n          value: 0,\n          color: \"green\",\n        },\n      ],\n    },\n  ]);\n\n  const testconsole = () => {\n    console.log(testData);\n    // testData.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     country: val.country,\n    //     timeline: \"4/10/21\",\n    //     amount: val.timeline.cases[\"4/10/21\"],\n    //   })\n    //   .then(() => {\n    //     console.log(\"success\")\n    //   }).catch((e)=>{console.log(e)})\n    // })\n  };\n\n  const getRandomColor = () => {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/covidworld\").then((response) => {\n      setTestData(response.data);\n      let date = \"\";\n      response.data.map((val, key) => {\n        if (date == val.timeline) {\n          data.value.map((value, key) => {\n            setData([...data.values, { \n              id: val.id,\n              label: val.country,\n              value: val.amount,\n              color: {getRandomColor}, \n            }]);\n          });\n          date = val.timeline;\n        } else {\n          setData([\n            ...data,\n            {\n              name: val.timeline,\n              value: [{ \n                id: val.id,\n                label: val.country,\n                value: val.amount,\n                color: {getRandomColor},\n              }],\n            },\n          ]);\n          date = val.timeline;\n        }\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      <button onClick={testconsole}>Check</button>\n      {<DynamicBarChart data={data} iterationTimeout={1000} />}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}