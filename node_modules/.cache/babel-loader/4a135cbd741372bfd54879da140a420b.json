{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Project/covid-19/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [testData, setTestData] = useState([]);\n  const [data, setData] = useState([]);\n  const [add, setAdd] = useState([]);\n  const [update, setUpdate] = useState([{\n    id_country: 65,\n    province: \"prince edward island\"\n  }, {\n    id_country: 67,\n    province: \"quebec\"\n  }, {\n    id_country: 68,\n    province: \"repatriated travellers\"\n  }, {\n    id_country: 69,\n    province: \"saskatchewan\"\n  }, {\n    id_country: 70,\n    province: \"anhui\"\n  }, {\n    id_country: 71,\n    province: \"beijing\"\n  }, {\n    id_country: 72,\n    province: \"chongqing\"\n  }, {\n    id_country: 73,\n    province: \"fujian\"\n  }, {\n    id_country: 74,\n    province: \"gansu\"\n  }, {\n    id_country: 75,\n    province: \"guangdong\"\n  }, {\n    id_country: 76,\n    province: \"guangxi\"\n  }, {\n    id_country: 77,\n    province: \"guizhou\"\n  }, {\n    id_country: 78,\n    province: \"hainan\"\n  }, {\n    id_country: 79,\n    province: \"hebei\"\n  }, {\n    id_country: 80,\n    province: \"heilongjiang\"\n  }, {\n    id_country: 81,\n    province: \"henan\"\n  }, {\n    id_country: 82,\n    province: \"hong kong\"\n  }, {\n    id_country: 83,\n    province: \"hubei\"\n  }, {\n    id_country: 84,\n    province: \"hunan\"\n  }, {\n    id_country: 85,\n    province: \"inner mongolia\"\n  }, {\n    id_country: 86,\n    province: \"jiangsu\"\n  }, {\n    id_country: 87,\n    province: \"jiangxi\"\n  }, {\n    id_country: 88,\n    province: \"jilin\"\n  }, {\n    id_country: 89,\n    province: \"liaoning\"\n  }, {\n    id_country: 90,\n    province: \"macau\"\n  }, {\n    id_country: 91,\n    province: \"ningxia\"\n  }, {\n    id_country: 92,\n    province: \"qinghai\"\n  }, {\n    id_country: 93,\n    province: \"shaanxi\"\n  }, {\n    id_country: 94,\n    province: \"shandong\"\n  }, {\n    id_country: 95,\n    province: \"shanghai\"\n  }, {\n    id_country: 96,\n    province: \"shanxi\"\n  }, {\n    id_country: 98,\n    province: \"sichuan\"\n  }, {\n    id_country: 99,\n    province: \"tianjin\"\n  }, {\n    id_country: 100,\n    province: \"tibet\"\n  }, {\n    id_country: 101,\n    province: \"unknown\"\n  }, {\n    id_country: 102,\n    province: \"xinjiang\"\n  }, {\n    id_country: 103,\n    province: \"yunnan\"\n  }, {\n    id_country: 104,\n    province: \"zhejiang\"\n  }]);\n  const [covid, setCovid] = useState([{\n    name: \"Round 1\",\n    values: [{\n      id: 1,\n      label: \"Test 1\",\n      value: 0,\n      color: \"red\"\n    }, {\n      id: 2,\n      label: \"Test 2\",\n      value: 0,\n      color: \"yellow\"\n    }, {\n      id: 3,\n      label: \"Test 3\",\n      value: 0,\n      color: \"green\"\n    }]\n  }]);\n\n  const getRandomColor = () => {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  };\n\n  const MapData = () => {\n    // let date = \"\";\n    testData.map(val => {\n      // if (date == val.timeline) {\n      //     setData([...data, { value:{\n      //       id: val.id,\n      //       label: val.country,\n      //       value: val.amount,\n      //       color: \"green\", \n      //     }\n      //     }]);\n      //   date = val.timeline;\n      //   console.log(date)\n      // } else {\n      data.push([{\n        name: val.timeline,\n        values: [{\n          id: 1,\n          label: val.country,\n          value: val.amount,\n          color: \"green\"\n        }]\n      }]); // date = val.timeline;\n\n      console.log(1); // }\n    });\n  };\n\n  const testconsole = () => {\n    // console.log(add);\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n    update.map(val => {\n      axios.put(\"http://localhost:3001/updatecovidworld\", {\n        id_country: val.id_country,\n        province: val.province\n      }).then(() => {}).catch(e => {\n        console.log(e);\n      });\n      console.log(1);\n    });\n  };\n\n  useEffect(() => {\n    // axios.get(\"http://localhost:3001/covidworld\").then((response) => {\n    //   setTestData(response.data);\n    // });\n    // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n    console.log(update);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: testconsole,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(DynamicBarChart, {\n      data: data,\n      startAutomatically: false,\n      showStartButton: true,\n      startButtonText: 'Click Me!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5JvFXYNkjTxdfQ2Z78YAgRhtFgs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paul/Project/covid-19/client/src/App.js"],"names":["useState","useEffect","axios","DynamicBarChart","App","testData","setTestData","data","setData","add","setAdd","update","setUpdate","id_country","province","covid","setCovid","name","values","id","label","value","color","getRandomColor","letters","i","Math","floor","random","MapData","map","val","push","timeline","country","amount","console","log","testconsole","put","then","catch","e"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { DynamicBarChart } from \"react-dynamic-charts\";\nimport \"react-dynamic-charts/dist/index.css\";\n\nfunction App() {\n  const [testData, setTestData] = useState([]);\n  const [data, setData] = useState([]);\n  const [add , setAdd] = useState([]);\n  const [update , setUpdate] = useState([\n    {\n      id_country: 65,\n      province:\"prince edward island\"\n    },\n    {\n      id_country: 67,\n      province:\"quebec\"\n    },\n    {\n      id_country: 68,\n      province:\"repatriated travellers\"\n    },\n    {\n      id_country: 69,\n      province:\"saskatchewan\"\n    },\n    {\n      id_country: 70,\n      province:\"anhui\"\n    },\n    {\n      id_country: 71,\n      province:\"beijing\"\n    },\n    {\n      id_country: 72,\n      province:\"chongqing\"\n    },\n    {\n      id_country: 73,\n      province:\"fujian\"\n    },\n    {\n      id_country: 74,\n      province:\"gansu\"\n    },\n    {\n      id_country: 75,\n      province:\"guangdong\"\n    },\n    {\n      id_country: 76,\n      province:\"guangxi\"\n    },\n    {\n      id_country: 77,\n      province:\"guizhou\"\n    },\n    {\n      id_country: 78,\n      province:\"hainan\"\n    },\n    {\n      id_country: 79,\n      province:\"hebei\"\n    },\n    {\n      id_country: 80,\n      province:\"heilongjiang\"\n    },\n    {\n      id_country: 81,\n      province:\"henan\"\n    },\n    {\n      id_country: 82,\n      province:\"hong kong\"\n    },\n    {\n      id_country: 83,\n      province:\"hubei\"\n    },\n    {\n      id_country: 84,\n      province:\"hunan\"\n    },\n    {\n      id_country: 85,\n      province:\"inner mongolia\"\n    },\n    {\n      id_country: 86,\n      province:\"jiangsu\"\n    },\n    {\n      id_country: 87,\n      province:\"jiangxi\"\n    },\n    {\n      id_country: 88,\n      province:\"jilin\"\n    },\n    {\n      id_country: 89,\n      province:\"liaoning\"\n    },\n    {\n      id_country: 90,\n      province:\"macau\"\n    },\n    {\n      id_country: 91,\n      province:\"ningxia\"\n    },\n    {\n      id_country: 92,\n      province:\"qinghai\"\n    },\n    {\n      id_country: 93,\n      province:\"shaanxi\"\n    },\n    {\n      id_country: 94,\n      province:\"shandong\"\n    },\n    {\n      id_country: 95,\n      province:\"shanghai\"\n    },\n    {\n      id_country: 96,\n      province:\"shanxi\"\n    },\n    {\n      id_country: 98,\n      province:\"sichuan\"\n    },\n    {\n      id_country: 99,\n      province:\"tianjin\"\n    },\n    {\n      id_country: 100,\n      province:\"tibet\"\n    },\n    {\n      id_country: 101,\n      province:\"unknown\"\n    },\n    {\n      id_country: 102,\n      province:\"xinjiang\"\n    },\n    {\n      id_country: 103,\n      province:\"yunnan\"\n    },\n    {\n      id_country: 104,\n      province:\"zhejiang\"\n    }\n  ]);\n  const [covid, setCovid] = useState([\n    {\n      name: \"Round 1\",\n      values: [\n        {\n          id: 1,\n          label: \"Test 1\",\n          value: 0,\n          color: \"red\",\n        },\n        {\n          id: 2,\n          label: \"Test 2\",\n          value: 0,\n          color: \"yellow\",\n        },\n        {\n          id: 3,\n          label: \"Test 3\",\n          value: 0,\n          color: \"green\",\n        },\n      ],\n    }\n  ]);\n\n\n  const getRandomColor = () => {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  const MapData = () =>{\n    // let date = \"\";\n    testData.map((val) => {\n      // if (date == val.timeline) {\n      //     setData([...data, { value:{\n      //       id: val.id,\n      //       label: val.country,\n      //       value: val.amount,\n      //       color: \"green\", \n      //     }\n      //     }]);\n      //   date = val.timeline;\n      //   console.log(date)\n      // } else {\n        data.push([\n          {\n            name: val.timeline,\n            values: [{ \n              id: 1,\n              label: val.country,\n              value: val.amount,\n              color: \"green\",\n            }],\n          },\n        ]);\n        // date = val.timeline;\n        console.log(1)\n      // }\n    });\n  }\n\n  const testconsole = () => {\n    // console.log(add);\n    // add.map((val)=>{\n    // axios.post(\"http://localhost:3001/createcovidworld\", {\n    //     id_country: 0,\n    //     country: val.country,\n    //     province: val.province,\n    //     timeline: '4/22/21',\n    //     amount: val.timeline.cases['4/22/21']\n    //   })\n    //   .then(() => {}).catch((e)=>{console.log(e)})\n    //   console.log(1)\n    // })\n\n    update.map((val)=>{\n      axios.put(\"http://localhost:3001/updatecovidworld\", {\n          id_country: val.id_country,\n          province: val.province\n        })\n        .then(() => {}).catch((e)=>{console.log(e)})\n        console.log(1)\n      })\n  };\n\n useEffect(() => {\n    // axios.get(\"http://localhost:3001/covidworld\").then((response) => {\n    //   setTestData(response.data);\n    // });\n    // axios.get(\"https://disease.sh/v3/covid-19/historical\").then((response) => {\n    //   setAdd(response.data);\n    //   console.log('4/22/21')\n    // });\n    console.log(update)\n  }, []);\n\n  return (\n    <div>\n      <button onClick={testconsole}>Check</button><button onClick={testconsole}>Check</button>\n      {<DynamicBarChart \n      data={data} \n      startAutomatically={false}\n      showStartButton={true}\n      startButtonText={'Click Me!'} />}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}